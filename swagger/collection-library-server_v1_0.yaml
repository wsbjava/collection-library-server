swagger: "2.0"
info:
  title: collection-library-server-API
  description: API for collection-library-server
  version: 1.0.0
host: api.collection-library-server.com
schemes:
  - https
  - http
consumes:
  - application/json
produces:
  - application/json
definitions:
  Error:
   type: object
   properties:
      message:
        type: string
        description: Error message
   required:
    - message
   example:
      message: 'Sample error message.'
  RegisterUserRequest:
    type: object
    properties:
      email:
        type: string
        description: User email address
      password:
        type: string
        description: User password
      name:
        type: string
        description: User's name
      surname:
        type: string
        description: User's surname
      date_of_birth:
        type: string
        format: date
        description: User's date of birth
    required:
      - email
      - password
      - name
      - surname
      - date_of_birth
    example:
      email: 'uzytkownik@collection-library.pl'
      password: 'password'
      name: 'name'
      username: 'username'
      date_of_birth: '12-12-1999'
  AuthenticationRequest:
    type: object
    properties:
      e-mail:
        type: string
      password:
        type: string
    required:
      - e-mail
      - password
    example:
      e-mail: 'uzytkownik@collection-library.pl'
      password: 'password'
  Role:
    type: object
    properties:
      id:
        type: integer
        description: Role id
      function:
        type: string
        description: Role's function
    required:
      - id
      - function
    example:
      id: 1
      function: 'Sample Role'
  User:
    type: object
    properties:
      id:
        type: integer
        description: User id
      email:
        type: string
        description: User email address
      role:
        type: array
        items:
          $ref: '#/definitions/Role'
    required:
      - id
      - email
    example:
      id: 1
      email: 'user@collection-library.pl'
      role:
        - id: 1
          function: 'Sample role'
  ModifyRole:
    type: object
    properties:
      user_id:
        type: integer
        description: User's id
      role_id:
        type : integer
        description: Role's id
      function:
        type: string
        enum:
          - 'add'
          - 'delete'
    required:
      - user_id
      - role_id
      - function
    example:
      user_id: 1
      role_id: 1
      function: 'Sample function'
  Author:
    type: object
    properties:
      id:
        type: integer
      first_name:
        type: string
      last_name:
        type: string
    required:
      - first_name
      - last_name
    example:
      id: 1
      first_name: 'John'
      last_name: 'Smith'
  AuthorRequest:
    type: object
    properties:
      first_name:
        type: string
      last_name:
        type: string
    required:
      - first_name
      - last_name
    example:
      first_name: 'John'
      last_name: 'Smith'
  Item:
    type: object
    properties:
      id:
        type: integer
        description: Item id
      title:
        type: string
      author:
        $ref: '#/definitions/Author'
      date_of_release:
        type: string
        format: date
      publisher:
        type: string
      type:
        type: string
      genre:
        type: string
    required:
      - title
      - author
      - date_of_release
      - publisher
      - type
      - genre
    example:
      id: 1
      title: 'title'
      author: 'Jan Kowalski'
      date_of_release: '12-12-1996'
      publisher: 'wydawca'
      type: 'książka'
      genre: 'fantasy'
  ItemRequest:
    type: object
    properties:
      title:
        type: string
      author:
        $ref: '#/definitions/AuthorRequest'
      date_of_release:
        type: string
        format: date
      publisher:
        type: string
      type:
        type: string
      genre:
        type: string
    required:
      - title
      - author
      - date_of_release
      - publisher
      - type
      - genre
    example:
      title: 'title'
      author: 'Jan Kowalski'
      date_of_release: '12-12-1996'
      publisher: 'wydawca'
      type: 'książka'
      genre: 'fantasy'
  ItemList:
    type: object
    properties:
      total:
        type: integer
        description: Size of the data
      data:
        type: array
        items:
          $ref: '#/definitions/Item'
        description: One pagination page data
    required:
      - total
      - data
    example:
      total: 99
      data:
        - id: 1
          title: 'title'
          author: 'Jan Kowalski'
          date_of_release: '12-12-1996'
          publisher: 'wydawca'
          type: 'książka'
          genre: 'fantasy'
        - id: 1
          title: 'title'
          author: 'Jan Kowalski'
          date_of_release: '12-12-1996'
          publisher: 'wydawca'
          type: 'książka'
          genre: 'fantasy'

  CollectionLibraryRequest:
    type: object
    properties:
      item_id:
        type: integer
        description: Item id to add
      shelf:
        type: string
        enum:
          - 'Have'
          - 'Want to have'
        description: Shelf on which item is added
    required:
      - item_id
      - shelf
    example:
      item_id: 1
      shelf: 'Have'
  ItemRentalRequest:
    type: object
    properties:
      item_id:
        type: integer
        description: Item to rent id
      duration:
        type: integer
        description: Number of days for which item is rented
    required:
      - item_id
      - duration
    example:
      item_id: 1
      duration: 10
  UserItemRental:
    type: object
    properties:
      id:
        type: integer
        description: Rental id
      user_id:
        type: integer
        description: User id
      item_id:
        type: integer
        description: Item to rent id
      end:
        type: string
        format: date
        description: Number of days for which item is rented
    required:
      - id
      - user_id
      - item_id
      - end
    example:
      id: 1
      user_id: 1
      item_id: 1
      end: '12-12-1996'
  UserItemRentalList:
    type: object
    properties:
      total:
        type: integer
        description: Size of the data
      data:
        type: array
        items:
          $ref: '#/definitions/UserItemRental'
        description: One pagination page data
    required:
      - total
      - data
    example:
      total: 99
      data:
        - id: 1
          user_id: 1
          item_id: 1
          end: '12-12-1996'
        - id: 1
          user_id: 1
          item_id: 1
          end: '12-12-1996'

  AdminToUserMessage:
    type: object
    properties:
      id:
        type: integer
        description: Message id
      user_id:
        type: integer
        description: Target user id
      text:
        type: string
        description: Message
    required:
      - user_id
      - text
    example:
      id: 1
      user_id: 1
      text: 'Sample text'
  MessagesList:
    type: object
    properties:
      total:
        type: integer
        description: Size of the data
      data:
        type: array
        items:
          $ref: '#/definitions/AdminToUserMessage'
        description: One pagination page data
    required:
      - total
      - data
    example:
      total: 99
      data:
        - id: 1
          user_id: 1
          text: 'Sample text'
        - id: 1
          user_id: 1
          text: 'Sample text'

  Suggestion:
    type: object
    properties:
      id:
        type: integer
        description: Id of the suggestion
      item_to_add:
        $ref: '#/definitions/ItemRequest'
        description: Data of item
    required:
      - id
      - item_to_add
    example:
      id: 1
      title: 'title'
      author: 'Jan Kowalski'
      date_of_release: '12-12-1996'
      publisher: 'wydawca'
      type: 'książka'
      genre: 'fantasy'

  UserSuggestionList:
    type: object
    properties:
      total:
        type: integer
        description: Size of the data
      data:
        type: array
        items:
          $ref: '#/definitions/Suggestion'
        description: One pagination page data
    required:
      - total
      - data
    example:
      total: 99
      data:
        - id: 1
          title: 'title'
          author: 'Jan Kowalski'
          date_of_release: '12-12-1996'
          publisher: 'wydawca'
          type: 'książka'
          genre: 'fantasy'
        - id: 1
          title: 'title'
          author: 'Jan Kowalski'
          date_of_release: '12-12-1996'
          publisher: 'wydawca'
          type: 'książka'
          genre: 'fantasy'

paths:
  /users:
    post:
      summary: Register user.
      operationId: newUser
      description: Registration of a new user.
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - description: New user data
          in: body
          name: body
          schema:
            $ref: '#/definitions/RegisterUserRequest'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/User'
        400:
          description: Client error, e.g. unsufficient data
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server error, e.g. unexpected exception
          schema:
            $ref: '#/definitions/Error'

  /authenticate:
    post:
      summary: Authenticate user
      operationId: authUser
      description: Authentication of existing user
      produces:
        - application/json
      consumes:
          - application/json
      parameters:
        - description: Authentication passes
          in: body
          name: body
          schema:
           $ref: '#/definitions/AuthenticationRequest'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/User'
        400:
          description: Client error, e.g. unsufficient data
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server error, e.g. unexpected exception
          schema:
            $ref: '#/definitions/Error'
  /user/{id}/modifyRole:
    put:
      summary: Modify role of user.
      operationId: modifyRole
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Role modification
          in: path
          name: id
          required: true
          type: integer
        - description: Role
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ModifyRole'
      responses:
        204:
          description: Success
          schema:
            $ref: '#/definitions/Role'
        400:
          description: Client error, e.g. unsufficient data
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized error e.g. not priviliged
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server error, e.g. unexpected exception
          schema:
            $ref: '#/definitions/Error'
  /user/message:
    post:
      summary: Send message to user.
      operationId: messageSend
      parameters:
        - description: Target userId and text.
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/AdminToUserMessage'
      responses:
        204:
          description: Success
          schema:
            $ref: '#/definitions/User'
        400:
          description: Client error, e.g. unsufficient data
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server error, e.g. unexpected exception
          schema:
            $ref: '#/definitions/Error'
    get:
      summary: Retrieve data about whole messages
      operationId: getMessages
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - description: Number of records to return
          in: query
          name: limit
          required: true
          type: integer
        - description: Initial index
          in: query
          name: offset
          required: true
          type: integer
        - description: Phrases to search
          name: phrases
          in: query
          required: true
          type: string
      responses:
        200:
          description: Messages list
          schema:
            type: array
            items:
              $ref: '#/definitions/MessagesList'
        400:
          description: Client error, e.g. unsufficient data
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server error, e.g. unexpected exception
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Remove message
      operationId: removeMessage
      parameters:
        - description: Remove message
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/AdminToUserMessage'
      responses:
        204:
          description: Success
          schema:
            $ref: '#/definitions/Item'
        400:
          description: Client error, e.g. unsufficient data
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized error e.g. not priviliged
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server error, e.g. unexpected exception
          schema:
            $ref: '#/definitions/Error'


  /collection:
    get:
      summary: Retrieve data about whole collection
      operationId: getCollection
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - description: Number of records to return
          in: query
          name: limit
          required: true
          type: integer
        - description: Initial index
          in: query
          name: offset
          required: true
          type: integer
        - description: Phrases to search
          name: phrases
          in: query
          required: true
          type: string
      responses:
        200:
          description: Collection list
          schema:
            type: array
            items:
              $ref: '#/definitions/ItemList'
        400:
          description: Client error, e.g. unsufficient data
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server error, e.g. unexpected exception
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Add item of collection
      operationId: addItem
      parameters:
        - description: New item data.
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ItemRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Item'
        400:
          description: Client error, e.g. unsufficient data
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server error, e.g. unexpected exception
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Remove item from library.
      operationId: removeItem
      parameters:
        - description: Remove item from library
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Item'
      responses:
        204:
          description: Success
          schema:
            $ref: '#/definitions/Item'
        400:
          description: Client error, e.g. unsufficient data
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized error e.g. not priviliged
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server error, e.g. unexpected exception
          schema:
            $ref: '#/definitions/Error'
  /library:
    post:
      summary: Add item to library.
      operationId: postLibrary
      parameters:
        - description: Item library data.
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CollectionLibraryRequest'
      responses:
        204:
          description: Success
          schema:
            $ref: '#/definitions/Item'
        400:
          description: Client error, e.g. unsufficient data
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server error, e.g. unexpected exception
          schema:
            $ref: '#/definitions/Error'

  /rentals:
    get:
      summary: Retrieve data about whole rentals
      operationId: getUserRentalsList
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - description: Number of records to return
          in: query
          name: limit
          required: true
          type: integer
        - description: Initial index
          in: query
          name: offset
          required: true
          type: integer
        - description: Phrases to search
          name: phrases
          in: query
          required: true
          type: string
      responses:
        200:
          description: User rental list
          schema:
            type: array
            items:
              $ref: '#/definitions/UserItemRentalList'
        400:
          description: Client error, e.g. unsufficient data
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server error, e.g. unexpected exception
          schema:
            $ref: '#/definitions/Error'
  /item/rentRequest:
    post:
      summary: Rent an item.
      operationId: rentRequest
      parameters:
        - description: Role
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ItemRentalRequest'
      responses:
        204:
          description: Success
          schema:
            $ref: '#/definitions/Item'
        400:
          description: Client error, e.g. unsufficient data
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server error, e.g. unexpected exception
          schema:
            $ref: '#/definitions/Error'
  /rental/{id}/accept:
    put:
      summary: Accept item rental.
      operationId: putRentalIdAccept
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Rental id
          in: path
          name: id
          required: true
          type: integer
      responses:
        204:
          description: Success
          schema:
            $ref: '#/definitions/User'
        400:
          description: Client error, e.g. unsufficient data
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized error e.g. not priviliged
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server error, e.g. unexpected exception
          schema:
            $ref: '#/definitions/Error'
  /rental/{id}/reject:
    put:
      summary: Reject item rental.
      operationId: putRentalIdReject
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Rental id
          in: path
          name: id
          required: true
          type: integer
      responses:
        204:
          description: Success
          schema:
            $ref: '#/definitions/User'
        400:
          description: Client error, e.g. unsufficient data
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized error e.g. not priviliged
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server error, e.g. unexpected exception
          schema:
            $ref: '#/definitions/Error'

  /suggest:
    post:
      summary: Create suggestions.
      operationId: postSuggeston
      parameters:
        - description: Item library data.
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ItemRequest'
      responses:
        204:
          description: Success
          schema:
            $ref: '#/definitions/Item'
        400:
          description: Client error, e.g. unsufficient data
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server error, e.g. unexpected exception
          schema:
            $ref: '#/definitions/Error'
  /suggestion/{id}/accept:
    put:
      summary: Accept suggestion.
      operationId: putSuggestionIdAccept
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Suggestion id
          in: path
          name: id
          required: true
          type: integer
      responses:
        204:
          description: Success
          schema:
            $ref: '#/definitions/Suggestion'
        400:
          description: Client error, e.g. unsufficient data
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized error e.g. not priviliged
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server error, e.g. unexpected exception
          schema:
            $ref: '#/definitions/Error'
  /suggestion/{id}/reject:
    put:
      summary: Reject suggestion.
      operationId: putSuggestionIdReject
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Suggestion id
          in: path
          name: id
          required: true
          type: integer
      responses:
        204:
          description: Success
          schema:
            $ref: '#/definitions/Suggestion'
        400:
          description: Client error, e.g. unsufficient data
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized error e.g. not priviliged
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server error, e.g. unexpected exception
          schema:
            $ref: '#/definitions/Error'
  /suggestion:
    get:
      summary: Retrieve data about whole suggestions
      operationId: getSuggestionList
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - description: Number of records to return
          in: query
          name: limit
          required: true
          type: integer
        - description: Initial index
          in: query
          name: offset
          required: true
          type: integer
        - description: Phrases to search
          name: phrases
          in: query
          required: true
          type: string
      responses:
        200:
          description: User suggestion list
          schema:
            type: array
            items:
              $ref: '#/definitions/UserSuggestionList'
        400:
          description: Client error, e.g. unsufficient data
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized error e.g. not priviliged
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server error, e.g. unexpected exception
          schema:
            $ref: '#/definitions/Error'
